apiVersion: v1
kind: Namespace
metadata:
  name: app-test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  namespace: app-test
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
  namespace: app-test
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: app-test
data:
  haproxy.cfg: |
    global
        daemon
        maxconn 256

    defaults
        mode http
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms

    frontend http_front
        bind *:80
        default_backend http_back

    backend http_back
        balance roundrobin
        option httpchk
        server nginx1 nginx-svc.app-test.svc.cluster.local:80 check
        server nginx2 nginx-svc.app-test.svc.cluster.local:80 check
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy-deploy
  namespace: app-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
    spec:
      containers:
      - name: haproxy
        image: haproxy:2.7
        ports:
        - containerPort: 80
        volumeMounts:
        - name: haproxy-config-volume
          mountPath: /usr/local/etc/haproxy/
      volumes:
      - name: haproxy-config-volume
        configMap:
          name: haproxy-config
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-svc
  namespace: app-test
spec:
  type: NodePort
  selector:
    app: haproxy
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30081  # puoi cambiarla se preferisci
